generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model author {
  id    Int    @id @default(autoincrement())
  name  String
  email String @unique(map: "Author_email_key")
  post  post[]
}

model post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  Int
  author    author   @relation(fields: [authorId], references: [id], onDelete: Cascade, map: "Post_authorId_fkey")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId], map: "Post_authorId_fkey")
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model user {
  id            String         @id
  name          String?
  email         String?        @unique(map: "User_email_key")
  emailVerified DateTime?
  savedArticles savedarticle[]
  image         String?
  password      String?
  account       account[]
  session       session[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

model savedarticle {
  id         String   @id @default(cuid())
  userId     String
  articleUrl String
  title      String
  imageUrl   String?
  savedAt    DateTime @default(now())

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, articleUrl]) // prevents duplicates
  @@index([userId])
}
