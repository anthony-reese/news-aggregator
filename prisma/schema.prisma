generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  previewFeatures = ["clientExtensions"]
  engineType = "binary"
  binaryTargets = ["native"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey_rel")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey_pg")
}

model Author {
  id    Int    @id @default(autoincrement())
  name  String
  email String @unique(map: "Author_email_key")
  post  Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade, map: "Post_authorId_fkey_rel")

  @@index([authorId], map: "Post_authorId_fkey")
}

model Session {
  id           String   @id @default(cuid()) @map("id")
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey_rel")

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String?        @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  account       Account[]
  savedArticles SavedArticle[]
  session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

model SavedArticle {
  id         String   @id @default(cuid())
  userId     String
  articleUrl String
  title      String
  imageUrl   String?
  savedAt    DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, articleUrl])
  @@index([userId])
}
